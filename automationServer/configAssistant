const puppeteer = require('puppeteer');
const io = require('socket.io-client');
const dotenv = require('dotenv');
var myArgs = process.argv.slice(2);
dotenv.config();
const winstance = myArgs[1];
let bailout = true;
let skipChat = false;
if (myArgs.length > 2)
	skipChat = myArgs[2];
let  cnamesafe = myArgs[0].split("-")[0].replace(/_/g, "-").toLowerCase();
let  cname = myArgs[0].split("-")[0].replace(/_/g, " ").split(" ");

for (let i = 0; i < cname.length; i++) {
    cname[i] = cname[i][0].toUpperCase() + cname[i].substr(1);
}
cname = cname.join(" ");

console.log("---startup---");
console.log("inst: " + myArgs[0]);
console.log("winst: " + myArgs[1]);
console.log("cname: " + cname);
console.log("cnamesafe: " + cnamesafe);
console.log("skipChat: " + skipChat);

setTimeout(function() {
    bailout = false;
}, 7200000);

socket = io.connect("https://localhost", { secure: true, reconnection: true, rejectUnauthorized: false });

async function launchBrowser(){
	try {
		const browser = await puppeteer.launch({
		headless: true,
		userDataDir: '/root/da',
		args: ['--no-sandbox'] });
		return browser;
	}catch (e) {
		console.log(e);
	}
}
async function getPage(browser){
	try {
		const page = await browser.newPage();
		await page.setViewport({
			  width: 1680,
			  height: 925,
			  deviceScaleFactor: 2,
			});
		await page.setDefaultNavigationTimeout(40000); 
		await page.setUserAgent("Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:78.0) Gecko/20100101 Firefox/78.0");
		return page;
	}catch (e) {
		console.log(e);
	}
}

async function logon(page){
	try {
		await page.goto("https://us-south.assistant.watson.cloud.ibm.com/", {waitUntil: 'networkidle0'}).catch((err) => { console.log(err); });
		console.log("Beginning logon"); 
		if (await page.waitForSelector('#instances',{timeout: 500}).catch((err) => {}))
			return true;
		await page.waitForSelector('#app',{timeout: 500}).catch((err) => {})

		await page.waitForSelector('.CloudLoginForm--login-button').catch((err) => {console.log(err); page.screenshot({path: 'signin_error_start.png'});});
		await page.click('.CloudLoginForm--login-button').catch((err) => {console.log(err);});
		console.log("Entering logon info"); 
		await page.waitForSelector('input[name=username]').catch((err) => { console.log(err); }).catch((err) => {  page.screenshot({path: 'signin_error_user.png'}); console.log(err); throw err;});
		await page.type('input[name=username]', process.env.U, {delay: 20}).catch((err) => { console.log(err); });
		await page.$eval('button[id=continue-button]', el => el.click()).catch((err) => { console.log(err); });
		await page.waitForSelector('#password').catch((err) => { console.log(err); }).catch((err) => {  page.screenshot({path: 'signin_error_pass.png'}); console.log(err); throw err;});
		await page.type('#password', process.env.P, {delay: 200}).catch((err) => { console.log(err); });
		await page.click('.bx--text-input--password__visibility__toggle').catch((err) => {});
		
		await page.$eval('button[id=signinbutton]', el => el.click()).catch((err) => { console.log(err); });
		await page.waitForNavigation({waitUntil: 'networkidle2'}).catch((err) => { console.log(err); });

		const succ = await page.waitForSelector('#instances').catch((err) => {console.log(err); page.screenshot({path: 'signin_error_final.png'});});
		
		if (succ)
			return true;
		else 
			return false;
	}catch (e) {
		console.log(e);
	}
}

async function configWebChat(page, wi){
	try {
		console.log("starting webchat configuration");
		var wince = null;
		while (wince == null) {
			await page.goto("https://us-south.assistant.watson.cloud.ibm.com/us-south/" + wi , {waitUntil: 'networkidle0'}).catch((err) => {});
			wince = await page.waitForSelector('#AssistantCard-0').catch((err) => {});
			await page.screenshot({path: 'config_start1.png'});
		} 
		console.log("navigated to base page");
		
		if (await page.waitForSelector('div[title="Stop Walk-thru"]',{timeout: 5000}).catch((err) => {}))
			await page.click('div[title="Stop Walk-thru"]').catch((err) => {console.error(err);});
		await page.waitForNavigation({waitUntil: 'networkidle2'}).catch((err) => {});

		await page.click('#AssistantCard-0').catch((err) => {return false;});
		await page.waitForSelector('.IntegrationCard__icon--webChat',{timeout: 80000}).catch((err) => { console.error(err); return false; });
		await page.$eval('.IntegrationCard__icon--webChat', el => el.click()).catch((err) => {console.error(err); return false;});
		console.log("opened webchat");
		await page.waitForSelector('#tab-0',{timeout: 80000}).catch((err) => {console.error(err);});
		await page.click('#tab-0').catch((err) => {console.error(err); page.screenshot({path: 'no_style_tab.png'});});
		console.log("style tab");
		await page.waitForSelector('#integration_public_bot_name',{timeout: 80000}).catch((err) => {});
		await page.$eval('#integration_public_bot_name', el => el.value = '').catch((err) => {console.error(err);});
		let asName = cname + " Assistant";
		if(asName.length>17){
			asName = cname.split(" ")[0] + " Assistant";
			if(asName.length>17){
				asName = "My Assistant";
			}
		}
		await page.type('#integration_public_bot_name', asName, {delay: 20}).catch((err) => {console.error(err);});

		await page.click('#tab-1').catch((err) => {console.error(err);return false;});
		console.log("homescreen tab");
		await page.waitForSelector('.bx--toggle__switch',{timeout: 80000}).catch((err) => {page.screenshot({path: 'no_home_screen.png'}); console.error(err);return false;});
		await page.click('.bx--toggle__switch').catch((err) => {console.error(err);});
		await page.waitForSelector('[id="#web_chat_home_screen_greeting"]',{timeout: 8000}).catch((err) => {});
		let inputss2 = await page.$('[id="#web_chat_home_screen_starter_2"]',{timeout: 8000}).catch((err) => {});
		await inputss2.click({ clickCount: 3 }).catch((err) => {console.error(err);});
		await inputss2.type("Search Knowledge Base", {delay: 20}).catch((err) => {console.error(err);});
		inputss2 = await page.$('[id="#web_chat_home_screen_greeting"]',{timeout: 8000}).catch((err) => {console.error(err);});
		await inputss2.click({ clickCount: 3 }).catch((err) => {console.error(err); });
		await inputss2.type("Welcome to " + cname + ". How can I help you?", {delay: 20}).catch((err) => {console.error(err);});

		await page.click('#tab-5').catch((err) => {console.error(err);});
		console.log("embed tab");
		const epre = await page.waitForSelector('.bx--snippet-container',{timeout: 8000}).catch((err) => {});
		const embedcode = await page.$eval('pre', element => element.innerHTML).catch((err) => {});
		socket.emit('embed', {"r":myArgs[0], "code":embedcode});

		await page.click('#tab-3').catch((err) => {console.error(err);});
		console.log("suggestions tab");
		await page.waitForSelector('.bx--toggle__switch',{timeout: 8000}).catch((err) => {console.error(err); return false;});
		await page.click('.bx--toggle__switch').catch((err) => {console.error(err);});

		let [sbutton] = await page.$x("//button[contains(., 'Save and exit')]").catch((err) => {console.error(err); return false;});
		if (sbutton) {
		    await sbutton.click().catch((err) => {console.error(err); return false; });
		    console.log("saved");
		}
		const succ = await page.waitForSelector('.AssistantSkillPlaceholder__button',{timeout: 8000}).catch((err) => {console.error(err); return false;});
			
		if (succ){
			return true;
		}
		else 
			return false;
	}catch (e) {
		console.error(e);
		return false;
	}
}

async function configSearch(page, wi){
	try {
		await page.goto("https://us-south.assistant.watson.cloud.ibm.com/us-south/" + wi , {waitUntil: 'networkidle0'}).catch((err) => { });
		await page.waitForSelector('#AssistantCard-0').catch((err) => {return false;});
		await page.click('#AssistantCard-0').catch((err) => {return false});
		await page.waitForSelector('.AssistantSkillPlaceholder__button',{timeout: 8000}).catch((err) => {});
		[sbutton] = await page.$x("//button[contains(., 'Add search skill')]").catch((err) => {return false;});
		if (sbutton) {
		    await sbutton.click().catch((err) => {console.error(err); });
		}
		await page.waitForNavigation({timeout: 3000}).catch((err) => {});

		await page.$('#skill_name',{timeout: 8000}).catch((err) => {});
		await page.type('#skill_name', cname + " search", {delay: 20}).catch((err) => {});
		await page.waitForNavigation({timeout: 2000}).catch((err) => {});
		await page.click('#NewSkillForm__submit-button').catch((err) => {});

		await page.waitForNavigation({timeout: 20000}).catch((err) => {});
		await page.waitForSelector('.details-header').catch((err) => {console.log("timeout details-header"); return false;});
		await page.click('#instances-dropdown').catch((err) => {console.log("timeout instances-dropdown"); return false;});

		var ddtracker = false;

		await page.waitForNavigation({timeout: 6000}).catch((err) => {});
		for (let i = 0; i < 200; i++) {
    		await page.keyboard.press('ArrowDown').catch((err) => {});
    		[sbutton] = await page.$x("//div[@class='bx--list-box__menu-item__option'][.='" + cnamesafe + "-discovery']").catch((err) => {});
			if (sbutton) {
			    await sbutton.click().catch((err) => {});
			    ddtracker = true;
			    break;
			}
		}
		if (!ddtracker){
			console.log("did not find '" + cnamesafe + "-discovery' in dropdown"); 
			return false;
		}
		ddtracker = false;
	
		await page.waitForSelector('.details-header').catch((err) => {console.log("timeout instances-dropdown 2"); return false;});

		[sbutton] = await page.$x("//button[contains(., 'Next')]").catch((err) => {console.log("timeout next button"); return false;});
		if (sbutton) {
		    await sbutton.click().catch((err) => {console.error(err); });
		}else{return false;}

		await page.waitForNavigation({timeout: 30000}).catch((err) => {});

		

		await page.click('#SearchSkillConfig-body-dropdown').catch((err) => {console.log("timeout SearchSkillConfig-body-dropdown"); return false;});
		await page.waitForNavigation({timeout: 6000}).catch((err) => {});
		for (let i = 0; i < 7; i++) {
    		await page.keyboard.press('ArrowDown').catch((err) => {});
    		[sbutton] = await page.$x("//span[.='text']", {timeout: 200}).catch((err) => {});
			if (sbutton) {
			    await sbutton.click().catch((err) => {});
			    ddtracker = true;
			    break;
			}
		}
		if (!ddtracker){
			console.log("did not find text in dropdown"); 
			return false;
		}
		ddtracker = false;

		await page.click('#SearchSkillConfig-title-dropdown').catch((err) => {console.log("timeout SearchSkillConfig-title-dropdown");return false;});
		await page.waitForNavigation({timeout: 6000}).catch((err) => {});
		for (let i = 0; i < 15; i++) {
    		await page.keyboard.press('ArrowDown').catch((err) => {});
    		[sbutton] = await page.$x("//span[.='title']", {timeout: 200}).catch((err) => {});
			if (sbutton) {
			    await sbutton.click().catch((err) => {});
			    ddtracker = true;
			    break;
			}
		}
		
		if (!ddtracker){
			console.log("did not find title in dropdown"); 
			return false;
		}
		ddtracker = false;

		await page.click('#SearchSkillConfig-url-dropdown').catch((err) => {console.log("timeout SearchSkillConfig-url-dropdown");});
		await page.waitForNavigation({timeout: 6000}).catch((err) => {});
		for (let i = 0; i < 17; i++) {
    		await page.keyboard.press('ArrowDown').catch((err) => {});
    		[sbutton] = await page.$x("//span[.='source_link']", {timeout: 200}).catch((err) => {});
			if (sbutton) {
			    await sbutton.click().catch((err) => {});
			    ddtracker = true;
			    break;
			}
		}

		if (!ddtracker){
			console.log("did not find url in dropdown"); 
			return false;
		}
				
		await page.waitForSelector('#SearchSkillConfig__create').catch((err) => {return false;});
		await page.click('#SearchSkillConfig__create').catch((err) => {});
		await page.waitForNavigation({timeout: 30000}).catch((err) => {});

		const succ = await page.waitForSelector('.IntegrationCard__icon--webChat').catch((err) => { return false; });

		if (succ){
			return true;
		}
		else 
			return false;
	}catch (e) {
		console.log(e);
	}
}

async function main(){
	try {
		let browser = await launchBrowser().catch((err) => {console.error(err); });
		console.log("---opened browser---");
		let page = await getPage(browser).catch((err) => {console.error(err); });
		console.log("---opened page---");
		let loggedOn = await logon(page).catch((err) => {console.error(err); });
		console.log("---logon---");
		let configChat = false;
		while (!configChat && bailout && !skipChat)
			configChat = await configWebChat(page, winstance).catch((err) => {console.error(err); });
		console.log("---chat configured---");
		let configS = false;
		while (!configS && bailout)
			configS = await configSearch(page, winstance).catch((err) => {console.error(err); });
		console.log("---search configured---");

		if(!bailout)
			console.log("---exceeded timeout, bailing---");
				
		if(page)
			await page.close().catch((err) => {console.error(err); });
    	if(browser)
			await browser.close().catch((err) => {console.error(err); });
	} catch (e) {
      	console.log(e);
    }finally {
    	process.exit();
    }
}

main();
