const puppeteer = require('puppeteer');
const io = require('socket.io-client');
const dotenv = require('dotenv');
var myArgs = process.argv.slice(2);
dotenv.config();
const winstance = myArgs[1];
const inst = myArgs[0];
let bailout = true;
let skipChat = false;
if (myArgs.length > 2)
	skipChat = myArgs[2];
let  cnamesafe = myArgs[0].split("-")[0].replace(/_/g, "-").toLowerCase();
let  cname = myArgs[0].split("-")[0].replace(/_/g, " ").split(" ");

for (let i = 0; i < cname.length; i++) {
    cname[i] = cname[i][0].toUpperCase() + cname[i].substr(1);
}
cname = cname.join(" ");

console.log("---startup---");
console.log("inst: " + myArgs[0]);
console.log("winst: " + myArgs[1]);
console.log("cname: " + cname);
console.log("cnamesafe: " + cnamesafe);
console.log("skipChat: " + skipChat);

setTimeout(function() {
    bailout = false;
}, 7200000);

socket = io.connect("https://localhost", { secure: true, reconnection: true, rejectUnauthorized: false });

async function launchBrowser(){
	try {
		const browser = await puppeteer.launch({
		headless: true,
		userDataDir: '/root/da',
		args: ['--no-sandbox'] });
		return browser;
	}catch (e) {
		console.log(e);
	}
}
async function getPage(browser){
	try {
		const page = await browser.newPage();
		await page.setViewport({
			  width: 1680,
			  height: 925,
			  deviceScaleFactor: 2,
			});
		await page.setDefaultNavigationTimeout(40000); 
		await page.setUserAgent("Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:78.0) Gecko/20100101 Firefox/78.0");
		return page;
	}catch (e) {
		console.log(e);
	}
}

async function logon(page){
	try {
		await page.goto("https://us-south.assistant.watson.cloud.ibm.com/", {waitUntil: 'networkidle0'}).catch((err) => { console.log(err); });
		console.log("Beginning logon"); 
		if (await page.waitForSelector('#instances',{timeout: 500}).catch((err) => {}))
			return true;
		await page.waitForSelector('#app',{timeout: 500}).catch((err) => {})

		await page.waitForSelector('.CloudLoginForm--login-button').catch((err) => {console.log(err); page.screenshot({path: 'signin_error_start.png'});});
		await page.click('.CloudLoginForm--login-button').catch((err) => {console.log(err);});
		console.log("Entering logon info"); 
		await page.waitForSelector('input[name=username]').catch((err) => { console.log(err); }).catch((err) => {  page.screenshot({path: 'signin_error_user.png'}); console.log(err); throw err;});
		await page.type('input[name=username]', process.env.U, {delay: 20}).catch((err) => { console.log(err); });
		await page.$eval('button[id=continue-button]', el => el.click()).catch((err) => { console.log(err); });
		await page.waitForSelector('#password').catch((err) => { console.log(err); }).catch((err) => {  page.screenshot({path: 'signin_error_pass.png'}); console.log(err); throw err;});
		await page.type('#password', process.env.P, {delay: 200}).catch((err) => { console.log(err); });
		await page.click('.bx--text-input--password__visibility__toggle').catch((err) => {});
		
		await page.$eval('button[id=signinbutton]', el => el.click()).catch((err) => { console.log(err); });
		await page.waitForNavigation({waitUntil: 'networkidle2'}).catch((err) => { console.log(err); });

		const succ = await page.waitForSelector('#instances').catch((err) => {console.log(err); page.screenshot({path: 'signin_error_final.png'});});
		
		if (succ)
			return true;
		else 
			return false;
	}catch (e) {
		console.log(e);
	}
}

async function configWebChat(page, wi){
	try {
		let asName = cname + " Assistant";
		if(asName.length>17){
			asName = cname.split(" ")[0] + " Assistant";
			if(asName.length>17){
				asName = "My Assistant";
			}
		}
		console.log("Configuring web chat for " + asName); 
		await page.goto("https://us-south.assistant.watson.cloud.ibm.com/us-south/" + wi , {waitUntil: 'networkidle0'}).catch((err) => { });
		await page.waitForSelector('#AssistantCard-0').catch((err) => {page.screenshot({path: 'webchat_error.png'});return false;});

		console.log("Injected Jquery "); 
		await page.evaluate(() => {
			var script = document.createElement('script');
			script.src = "https://code.jquery.com/jquery-3.5.1.min.js";
			document.getElementsByTagName('head')[0].appendChild(script);
		}).catch((err) => {console.log(err);});	
		await page.waitForNavigation({timeout: 5000}).catch((err) => {});

		console.log("Beginning RPA"); 
		var succ = await page.evaluate(({asName,cname}) => {
			try {
				function readCookie(name) {
				    var nameEQ = name + "=";
				    var ca = document.cookie.split(';');
				    for (var i = 0; i < ca.length; i++) {
				        var c = ca[i];
				        while (c.charAt(0) == ' ') c = c.substring(1, c.length);
				        if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
				    }
				    return null;
				}
				var assistant = $.ajax('https://us-south.assistant.watson.cloud.ibm.com/rest/v2/assistants', {type:'GET', async:false});
				var assistantId = assistant.responseJSON.assistants[0].assistant_id;

				var gskill =  $.ajax('https://us-south.assistant.watson.cloud.ibm.com/rest/v2/skills?include_audit=true&verbose=true', {
							async:false,
						   	type: 'GET',
						  	contentType: "application/json; charset=utf-8",
							dataType: 'json',
							headers: {"X-XSRF-TOKEN" : readCookie("XSRF-TOKEN")},
						});
				var ur1 = $.ajax('https://us-south.assistant.watson.cloud.ibm.com/rest/v2/assistants/' + assistantId + '?include_audit=true&verbose=true', {
							async:false,
						   	type: 'POST',
						  	contentType: "application/json; charset=utf-8",
							dataType: 'json',
							headers: {"X-XSRF-TOKEN" : readCookie("XSRF-TOKEN")},
						   	data: JSON.stringify({"skill_references": []})
						});
				gskill.responseJSON.skills.forEach( function(skill) {
					$.ajax('https://us-south.assistant.watson.cloud.ibm.com/rest/v2/skills/' + skill.skill_id, {
							async:false,
						   	type: 'DELETE',
							headers: {"X-XSRF-TOKEN" : readCookie("XSRF-TOKEN")}
						});
				});

				var skill =  $.ajax('https://us-south.assistant.watson.cloud.ibm.com/rest/v2/skills?include_audit=true&verbose=true', {
							async:false,
						   	type: 'POST',
						  	contentType: "application/json; charset=utf-8",
							dataType: 'json',
							headers: {"X-XSRF-TOKEN" : readCookie("XSRF-TOKEN")},
						   	data: JSON.stringify({"name":"forreplace","description":"","language":"en","workspace":{"system_settings":{"disambiguation":{"enabled":true,"suggestion_text_policy":"title","randomize":true,"prompt":"Did you mean:","max_suggestions":5,"none_of_the_above_prompt":"None of the above"},"human_agent_assist":{"prompt":"Did you mean:"},"spelling_auto_correct":true,"off_topic":{"enabled":true},"system_entities":{"enabled":true},"intent_classification":{"training_backend_version":"v2"}},"metadata":null,"intents":[],"entities":[],"dialog_nodes":[{"node_id":"Welcome","dialog_node":"Welcome","description":null,"conditions":"welcome","output":{"generic":[{"response_type":"text","values":[{"text":"Hello. How can I help you?"}],"selection_policy":"sequential"}]},"context":null,"name":"welcome","parent":null,"previous_sibling":null},{"node_id":"Anything else","dialog_node":"Anything else","description":null,"conditions":"anything_else","output":{"generic":[{"response_type":"text","values":[{"text":"I didn't understand. You can try rephrasing."},{"text":"Can you reword your statement? I'm not understanding."},{"text":"I didn't get your meaning."}],"selection_policy":"sequential"}]},"context":null,"name":"anything_else","parent":null,"previous_sibling":"Welcome","disambiguation_opt_out":true}]},"type":"dialog"})
						});
				var skillId = skill.responseJSON.skill_id;
				var ur2 = $.ajax('https://us-south.assistant.watson.cloud.ibm.com/rest/v2/assistants/' + assistantId + '?include_audit=true&verbose=true', {
							async:false,
						   	type: 'POST',
						  	contentType: "application/json; charset=utf-8",
							dataType: 'json',
							headers: {"X-XSRF-TOKEN" : readCookie("XSRF-TOKEN")},
						   	data: JSON.stringify({"skill_references": [{"skill_id" : skillId}]})
						});

				var itegration = $.ajax('https://us-south.assistant.watson.cloud.ibm.com/rest/v2/assistants/' + assistantId + '/tooling_integrations/definitions?deploy=true&agentInstanceId=' + assistantId, {
							async:false,
						   	type: 'POST',
						  	contentType: "application/json; charset=utf-8",
							dataType: 'json',
							headers: {"X-XSRF-TOKEN" : readCookie("XSRF-TOKEN")},
						   	data: JSON.stringify({"integration_template_id": "9de32257-f523-4784-8f8c-9db5046d3cda", "name":asName + " Chat","config":{"public":{"botName":asName,"home_screen":{"is_on":true,"greeting":"Welcome to " + cname + ". How can I help you?","starters":{"is_on":true,"buttons":[{"label":"Find nearby location","value":""},{"label":"Order Lookup","value":""},{"label":"Search Knowledge Base","value":""}]}},"service_desk":{"is_on":false},"css_variables":{},"version_to_use":"1","enable_features":{"alternateSuggestions":true},"alternate_suggestions":{"is_on":true,"contact_label":"Connect to agent","contact_option":"always"}},"private":{"authorization":{"is_on":false,"encryption":{}}}},"description":"Created by RPA"})
						});

	  			var integrationID = itegration.responseJSON.id;
	  			var serviceInstanceID = itegration.responseJSON.tenant_id;

				var returnvalue = {"integrationID": integrationID, "serviceInstanceID": serviceInstanceID, "status": itegration.status};
				return returnvalue;

			} catch(err) {return err;}
		    },{asName, cname}).catch((err) => {console.log(err);});	
		if (succ){
			console.log(succ);
			if (succ.status == 201){
				socket.emit('embed', {"r":myArgs[0], "integrationID":succ.integrationID, "serviceInstanceID": succ.serviceInstanceID});
				return true;
			}
			else 
				return false;
		}
		else 
			return false;
	}catch (e) {
		console.error(e);
		return false;
	}
}

async function configSearch(page, wi){
	try {
		await page.goto("https://us-south.assistant.watson.cloud.ibm.com/us-south/" + wi , {waitUntil: 'networkidle0'}).catch((err) => { });
		await page.waitForSelector('#AssistantCard-0').catch((err) => {return false;});
		await page.click('#AssistantCard-0').catch((err) => {return false});
		await page.waitForSelector('.AssistantSkillPlaceholder__button',{timeout: 8000}).catch((err) => {});
		[sbutton] = await page.$x("//button[contains(., 'Add search skill')]").catch((err) => {return false;});
		if (sbutton) {
		    await sbutton.click().catch((err) => {console.error(err); });
		}
		await page.waitForNavigation({timeout: 3000}).catch((err) => {});

		await page.$('#skill_name',{timeout: 8000}).catch((err) => {});
		await page.type('#skill_name', cname + " search", {delay: 20}).catch((err) => {});
		await page.waitForNavigation({timeout: 2000}).catch((err) => {});
		await page.click('#NewSkillForm__submit-button').catch((err) => {});

		await page.waitForNavigation({timeout: 20000}).catch((err) => {});
		await page.waitForSelector('.details-header').catch((err) => {console.log("timeout details-header"); return false;});
		await page.click('#instances-dropdown').catch((err) => {console.log("timeout instances-dropdown"); return false;});

		var ddtracker = false;

		await page.waitForNavigation({timeout: 6000}).catch((err) => {});
		for (let i = 0; i < 200; i++) {
    		await page.keyboard.press('ArrowDown').catch((err) => {});
    		[sbutton] = await page.$x("//div[@class='bx--list-box__menu-item__option'][.='" + cnamesafe + "-discovery']").catch((err) => {});
			if (sbutton) {
			    await sbutton.click().catch((err) => {});
			    ddtracker = true;
			    break;
			}
		}
		if (!ddtracker){
			console.log("did not find '" + cnamesafe + "-discovery' in dropdown"); 
			return false;
		}
		ddtracker = false;
	
		await page.waitForSelector('.details-header').catch((err) => {console.log("timeout instances-dropdown 2"); return false;});

		[sbutton] = await page.$x("//button[contains(., 'Next')]").catch((err) => {console.log("timeout next button"); return false;});
		if (sbutton) {
		    await sbutton.click().catch((err) => {console.error(err); });
		}else{return false;}

		await page.waitForNavigation({timeout: 30000}).catch((err) => {});

		

		await page.click('#SearchSkillConfig-body-dropdown').catch((err) => {console.log("timeout SearchSkillConfig-body-dropdown"); return false;});
		await page.waitForNavigation({timeout: 6000}).catch((err) => {});
		for (let i = 0; i < 7; i++) {
    		await page.keyboard.press('ArrowDown').catch((err) => {});
    		[sbutton] = await page.$x("//span[.='text']", {timeout: 200}).catch((err) => {});
			if (sbutton) {
			    await sbutton.click().catch((err) => {});
			    ddtracker = true;
			    break;
			}
		}
		if (!ddtracker){
			console.log("did not find text in dropdown"); 
			return false;
		}
		ddtracker = false;

		await page.click('#SearchSkillConfig-title-dropdown').catch((err) => {console.log("timeout SearchSkillConfig-title-dropdown");return false;});
		await page.waitForNavigation({timeout: 6000}).catch((err) => {});
		for (let i = 0; i < 15; i++) {
    		await page.keyboard.press('ArrowDown').catch((err) => {});
    		[sbutton] = await page.$x("//span[.='title']", {timeout: 200}).catch((err) => {});
			if (sbutton) {
			    await sbutton.click().catch((err) => {});
			    ddtracker = true;
			    break;
			}
		}
		
		if (!ddtracker){
			console.log("did not find title in dropdown"); 
			return false;
		}
		ddtracker = false;

		await page.click('#SearchSkillConfig-url-dropdown').catch((err) => {console.log("timeout SearchSkillConfig-url-dropdown");});
		await page.waitForNavigation({timeout: 6000}).catch((err) => {});
		for (let i = 0; i < 17; i++) {
    		await page.keyboard.press('ArrowDown').catch((err) => {});
    		[sbutton] = await page.$x("//span[.='source_link']", {timeout: 200}).catch((err) => {});
			if (sbutton) {
			    await sbutton.click().catch((err) => {});
			    ddtracker = true;
			    break;
			}
		}

		if (!ddtracker){
			console.log("did not find url in dropdown"); 
			return false;
		}
				
		await page.waitForSelector('#SearchSkillConfig__create').catch((err) => {return false;});
		await page.click('#SearchSkillConfig__create').catch((err) => {});
		await page.waitForNavigation({timeout: 30000}).catch((err) => {});

		const succ = await page.waitForSelector('.IntegrationCard__icon--webChat').catch((err) => { return false; });

		if (succ){
			return true;
		}
		else 
			return false;
	}catch (e) {
		console.log(e);
	}
}

async function main(){
	try {
		let browser = await launchBrowser().catch((err) => {console.error(err); });
		console.log("---opened browser---");
		let page = await getPage(browser).catch((err) => {console.error(err); });
		console.log("---opened page---");
		let loggedOn = await logon(page).catch((err) => {console.error(err); });
		console.log("---logon---");
		let configChat = false;
		while (!configChat && bailout && !skipChat)
			configChat = await configWebChat(page, winstance).catch((err) => {console.error(err); });
		console.log("---chat configured---");
		let configS = false;
		while (!configS && bailout)
			configS = await configSearch(page, winstance).catch((err) => {console.error(err); });
		console.log("---search configured---");

		if(!bailout)
			console.log("---exceeded timeout, bailing---");
				
		if(page)
			await page.close().catch((err) => {console.error(err); });
    	if(browser)
			await browser.close().catch((err) => {console.error(err); });
	} catch (e) {
      	console.log(e);
    }finally {
    	process.exit();
    }
}

main();

